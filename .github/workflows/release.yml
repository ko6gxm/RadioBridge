name: Release üöÄ

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0

permissions:
  contents: write
  discussions: write

jobs:
  validate-version:
    name: Validate Version Consistency
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      tag: ${{ steps.extract.outputs.tag }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted tag: $TAG, version: $VERSION"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Check version consistency
      run: |
        TAG_VERSION="${{ steps.extract.outputs.version }}"

        # Check pyproject.toml version
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "pyproject.toml version: $PYPROJECT_VERSION"

        # Check __init__.py version
        INIT_VERSION=$(grep '__version__ = ' src/radiobridge/__init__.py | sed 's/__version__ = "\(.*\)"/\1/')
        echo "__init__.py version: $INIT_VERSION"

        # Validate all versions match
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "‚ùå Version mismatch: tag ($TAG_VERSION) != pyproject.toml ($PYPROJECT_VERSION)"
          exit 1
        fi

        if [ "$TAG_VERSION" != "$INIT_VERSION" ]; then
          echo "‚ùå Version mismatch: tag ($TAG_VERSION) != __init__.py ($INIT_VERSION)"
          exit 1
        fi

        echo "‚úÖ All versions match: $TAG_VERSION"

  build-and-test:
    name: Build & Test Release
    runs-on: ubuntu-latest
    needs: validate-version

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Install project dependencies
      run: |
        pip install click requests pandas python-dateutil beautifulsoup4 lxml
        pip install black flake8 pytest pytest-cov
        pip install -e .

    - name: Run tests
      run: |
        pytest --cov=radiobridge --cov-report=xml --cov-report=term-missing

    - name: Check code quality
      run: |
        black --check src/ tests/
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Test CLI functionality
      run: |
        rb --version
        rb list-radios

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist-${{ needs.validate-version.outputs.version }}
        path: dist/
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist-${{ needs.validate-version.outputs.version }}
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        TAG="${{ needs.validate-version.outputs.tag }}"

        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Try to extract the section for this version
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            BEGIN { found=0; content="" }
            /^## \[/ {
              if (found) exit
              if ($0 ~ version) { found=1; next }
            }
            found && /^## \[/ { exit }
            found { content = content $0 "\n" }
            END { print content }
          ' CHANGELOG.md)

          if [ -n "$CHANGELOG_CONTENT" ]; then
            echo "Found changelog content for version $VERSION"
            echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No specific changelog content found for version $VERSION"
            echo "changelog_content=See [CHANGELOG.md](CHANGELOG.md) for details." >> $GITHUB_OUTPUT
          fi
        else
          echo "No CHANGELOG.md found"
          echo "changelog_content=Release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.tag }}
        name: RadioBridge ${{ needs.validate-version.outputs.version }}
        body: |
          # RadioBridge ${{ needs.validate-version.outputs.version }} üéâ

          Professional Amateur Radio Repeater Programming toolkit for bridging RepeaterBook.com data to popular radio models.

          ## üì¶ Installation

          ```bash
          pip install radiobridge==${{ needs.validate-version.outputs.version }}
          ```

          ## üîÑ Changes in this release

          ${{ steps.release_notes.outputs.changelog_content }}

          ## üõ†Ô∏è Supported Radio Models
          - Anytone AT-D878UV II Plus (handheld DMR/Analog)
          - Anytone AT-D578UV III Plus (mobile DMR/Analog)
          - Baofeng DM-32UV (handheld DMR/Analog)
          - Baofeng K5 Plus (handheld analog)

          ## üöÄ Quick Start

          ```bash
          # List supported radios
          rb list-radios

          # Download repeaters for California
          rb download --state CA

          # Format for your radio
          rb format repeaters_ca.csv --radio anytone-878
          ```

          ## üìö Documentation
          - [README](https://github.com/ko6gxm/radiobridge#readme) - Getting started guide
          - [CONTRIBUTING](https://github.com/ko6gxm/radiobridge/blob/main/CONTRIBUTING.md) - Development guide
          - [CHANGELOG](https://github.com/ko6gxm/radiobridge/blob/main/CHANGELOG.md) - Full version history

          ## üêõ Found an issue?
          Please [report it](https://github.com/ko6gxm/radiobridge/issues) or join our [discussions](https://github.com/ko6gxm/radiobridge/discussions).

          ---

          *73 and happy programming! - Craig KO6GXM*
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(needs.validate-version.outputs.version, 'alpha') || contains(needs.validate-version.outputs.version, 'beta') || contains(needs.validate-version.outputs.version, 'rc') }}
        discussion_category_name: Releases
        generate_release_notes: true
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test, create-release]
    environment: pypi

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist-${{ needs.validate-version.outputs.version }}
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-version, create-release, publish-pypi]
    if: success()

    steps:
    - name: Release Success Summary
      run: |
        echo "üéâ Release ${{ needs.validate-version.outputs.tag }} completed successfully!"
        echo "‚úÖ GitHub Release created"
        echo "‚úÖ PyPI package published"
        echo "‚úÖ All validations passed"
        echo ""
        echo "üì¶ Install with: pip install radiobridge==${{ needs.validate-version.outputs.version }}"
        echo "üîó Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag }}"

    - name: Notify Slack of successful release
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            attachments: [{
              color: 'good',
              title: 'üéâ RadioBridge Release ${{ needs.validate-version.outputs.version }} Published!',
              title_link: '${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag }}',
              fields: [
                {
                  title: 'Version',
                  value: '${{ needs.validate-version.outputs.version }}',
                  short: true
                },
                {
                  title: 'Tag',
                  value: '${{ needs.validate-version.outputs.tag }}',
                  short: true
                },
                {
                  title: 'Installation',
                  value: '`pip install radiobridge==${{ needs.validate-version.outputs.version }}`',
                  short: false
                },
                {
                  title: 'Links',
                  value: '‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-version.outputs.tag }}|GitHub Release>\n‚Ä¢ <https://pypi.org/project/radiobridge/${{ needs.validate-version.outputs.version }}/|PyPI Package>',
                  short: false
                }
              ],
              footer: 'RadioBridge Release System',
              ts: '${{ github.event.head_commit.timestamp }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test, create-release, publish-pypi]
    if: failure()

    steps:
    - name: Notify Slack of release failure
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            attachments: [{
              color: 'danger',
              title: '‚ùå RadioBridge Release ${{ needs.validate-version.outputs.version || github.ref_name }} Failed!',
              title_link: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              fields: [
                {
                  title: 'Version',
                  value: '${{ needs.validate-version.outputs.version || github.ref_name }}',
                  short: true
                },
                {
                  title: 'Trigger',
                  value: '${{ github.event_name }}',
                  short: true
                },
                {
                  title: 'Job Status',
                  value: '‚Ä¢ Validation: ${{ needs.validate-version.result }}\n‚Ä¢ Build & Test: ${{ needs.build-and-test.result }}\n‚Ä¢ Create Release: ${{ needs.create-release.result }}\n‚Ä¢ Publish PyPI: ${{ needs.publish-pypi.result }}',
                  short: false
                },
                {
                  title: 'Action Required',
                  value: 'Check the workflow logs and fix any issues before retrying the release.',
                  short: false
                }
              ],
              footer: 'RadioBridge Release System',
              ts: '${{ github.event.head_commit.timestamp }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
