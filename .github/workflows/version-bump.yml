name: Version Bump & Changelog ðŸ”„

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
        - prerelease
      prerelease_type:
        description: 'Prerelease type (if prerelease selected)'
        required: false
        default: 'alpha'
        type: choice
        options:
        - alpha
        - beta
        - rc
      custom_version:
        description: 'Custom version (overrides version_type if provided)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    name: Update Version & Changelog
    runs-on: ubuntu-latest

    outputs:
      old_version: ${{ steps.current.outputs.version }}
      new_version: ${{ steps.calculate.outputs.version }}
      changelog_updated: ${{ steps.changelog.outputs.updated }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Get current version
      id: current
      run: |
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: calculate
      run: |
        CURRENT="${{ steps.current.outputs.version }}"

        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          # Use custom version if provided
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
          echo "Using custom version: $NEW_VERSION"
        else
          # Parse current version
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Remove any prerelease suffix from patch
          PATCH=$(echo "$PATCH" | sed 's/\([0-9]*\).*/\1/')

          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            patch)
              PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              ;;
            prerelease)
              # For prerelease, increment patch and add prerelease suffix
              if [[ "$CURRENT" == *"${{ github.event.inputs.prerelease_type }}"* ]]; then
                # Already a prerelease, increment the number
                CURRENT_NUM=$(echo "$CURRENT" | sed -n "s/.*${{ github.event.inputs.prerelease_type }}\([0-9]*\)/\1/p")
                if [ -z "$CURRENT_NUM" ]; then CURRENT_NUM=0; fi
                NEW_NUM=$((CURRENT_NUM + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH${{ github.event.inputs.prerelease_type }}$NEW_NUM"
              else
                # First prerelease of this version
                PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$PATCH${{ github.event.inputs.prerelease_type }}1"
              fi
              ;;
          esac
        fi

        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"

    - name: Update version files
      run: |
        NEW_VERSION="${{ steps.calculate.outputs.version }}"

        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/radiobridge/__init__.py

        echo "Updated version to $NEW_VERSION in:"
        echo "- pyproject.toml"
        echo "- src/radiobridge/__init__.py"

    - name: Generate changelog entry
      id: changelog
      run: |
        NEW_VERSION="${{ steps.calculate.outputs.version }}"
        OLD_VERSION="${{ steps.current.outputs.version }}"

        # Get date in ISO format
        RELEASE_DATE=$(date -u +"%Y-%m-%d")

        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -n "$LAST_TAG" ]; then
          # Get commits since last tag
          COMMITS=$(git log --oneline "$LAST_TAG"..HEAD --pretty=format:"- %s" 2>/dev/null || echo "")
        else
          # Get all commits if no previous tag
          COMMITS=$(git log --oneline --pretty=format:"- %s" 2>/dev/null || echo "")
        fi

        # Create new changelog entry
        NEW_ENTRY="## [$NEW_VERSION] - $RELEASE_DATE

        ### Changes
        $COMMITS

        "

        # Update CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Insert new entry after the header
          awk -v entry="$NEW_ENTRY" '
            /^# Changelog/ { print; print ""; print entry; next }
            { print }
          ' CHANGELOG.md > CHANGELOG.md.tmp
          mv CHANGELOG.md.tmp CHANGELOG.md
          echo "updated=true" >> $GITHUB_OUTPUT
        else
          # Create new changelog
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$NEW_ENTRY" >> CHANGELOG.md
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

        echo "Generated changelog entry for version $NEW_VERSION"

    - name: Commit changes
      run: |
        NEW_VERSION="${{ steps.calculate.outputs.version }}"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add pyproject.toml src/radiobridge/__init__.py CHANGELOG.md
        git commit -m "Bump version to $NEW_VERSION

        ðŸ”„ Version Update:
        - Update pyproject.toml version to $NEW_VERSION
        - Update __init__.py version to $NEW_VERSION
        - Add changelog entry for $NEW_VERSION

        This commit prepares the codebase for release $NEW_VERSION.
        Next step: Create and push tag 'v$NEW_VERSION' to trigger release."

    - name: Push changes
      run: |
        git push origin ${{ github.ref_name }}

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.calculate.outputs.version }}"

        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION

        ðŸŽ‰ RadioBridge $NEW_VERSION

        This tag triggers the automated release workflow which will:
        - Create GitHub release with changelog
        - Build and publish to PyPI
        - Generate release assets

        Install with: pip install radiobridge==$NEW_VERSION"

        git push origin "v$NEW_VERSION"

        echo "âœ… Created and pushed tag v$NEW_VERSION"
        echo "ðŸš€ Release workflow will start automatically"

  create-pr-summary:
    name: Create Release Summary
    runs-on: ubuntu-latest
    needs: bump-version
    if: always()

    steps:
    - name: Release Summary
      run: |
        echo "## ðŸ“¦ Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version:** ${{ needs.bump-version.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version:** ${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Type:** ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY

        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          echo "- **Custom Version Used:** Yes" >> $GITHUB_STEP_SUMMARY
        fi

        echo "- **Changelog Updated:** ${{ needs.bump-version.outputs.changelog_updated }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ðŸš€ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The tag \`v${{ needs.bump-version.outputs.new_version }}\` has been created and pushed." >> $GITHUB_STEP_SUMMARY
        echo "This will automatically trigger the [Release workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/release.yml) which will:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Create GitHub release" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Build and publish to PyPI" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Generate release assets" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation after release:** \`pip install radiobridge==${{ needs.bump-version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
