name: CI/CD Pipeline 🚀

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install main dependencies directly
        python -m pip install click requests pandas python-dateutil beautifulsoup4 lxml
        # Install dev dependencies
        python -m pip install black flake8 pytest pytest-cov pre-commit ipython responses psutil
        # Install the package in development mode
        python -m pip install -e .

    - name: Verify installation
      run: |
        python -c "import radiobridge; print(f'RadioBridge version: {radiobridge.__version__}')"
        rb --version

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check formatting with Black
      run: |
        black --check src/ tests/

    - name: Run tests
      run: |
        pytest --cov=radiobridge --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install click requests pandas python-dateutil beautifulsoup4 lxml
        python -m pip install black flake8 pytest pytest-cov pre-commit ipython
        python -m pip install -e .

    - name: Test CLI installation
      run: |
        rb --version
        rb --help

    - name: Test basic functionality
      run: |
        rb list-radios

    # Note: We avoid actual downloads in CI to respect RepeaterBook servers
    - name: Test CLI help system
      run: |
        rb download --help
        rb format --help

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel build twine

    - name: Build package
      run: |
        python -m build

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies for security scan
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install click requests pandas python-dateutil beautifulsoup4 lxml
        python -m pip install black flake8 pytest pytest-cov pre-commit ipython
        python -m pip install -e .
        python -m pip install safety bandit[toml]

    - name: Run safety check
      run: |
        python -m safety check --json || echo "Safety check completed with warnings"
      continue-on-error: true  # Allow failure due to potential false positives

    - name: Run bandit security scan
      run: |
        python -m bandit -r src/ -f json || echo "Bandit scan completed with warnings"
      continue-on-error: true  # Allow low-severity issues

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install click requests pandas python-dateutil beautifulsoup4 lxml
        python -m pip install black flake8 pytest pytest-cov pre-commit ipython psutil
        python -m pip install -e .

    - name: Run performance tests
      run: |
        # Test memory usage and speed with sample data
        python -c "
        import time
        import psutil
        import pandas as pd
        from radiobridge.radios import get_radio_formatter

        # Create large sample dataset
        data = pd.DataFrame({
            'frequency': ['146.520'] * 1000,
            'callsign': ['TEST'] * 1000,
            'location': ['Test City'] * 1000
        })

        # Test each formatter
        for radio in ['anytone-878', 'anytone-578', 'baofeng-dm32uv', 'baofeng-k5', 'baofeng-uv5r', 'baofeng-uv5rm', 'baofeng-uv25', 'baofeng-uv28']:
            formatter = get_radio_formatter(radio)

            start_time = time.time()
            start_memory = psutil.Process().memory_info().rss / 1024 / 1024

            result = formatter.format(data)

            end_time = time.time()
            end_memory = psutil.Process().memory_info().rss / 1024 / 1024

            print(f'{radio}: {end_time - start_time:.2f}s, {end_memory - start_memory:.1f}MB')
            assert len(result) == 1000, f'{radio} failed to process all rows'

        print('Performance tests passed!')
        "

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Check documentation
      run: |
        # Check that key documentation files exist
        test -f README.md
        test -f CHANGELOG.md
        test -f CONTRIBUTING.md
        test -f LICENSE

        # Check for basic content
        grep -q "Craig.*KO6GXM" README.md
        grep -q "ko6gxm.com" README.md
        grep -q "craig@ko6gxm.com" README.md

        echo "Documentation checks passed!"

    - name: Validate links in documentation
      run: |
        # Basic check for common URL patterns
        grep -E "https?://[^\s]+" README.md | head -10

        # Check for placeholder URLs
        if grep -q "example.com\|placeholder\|YOUR_" README.md CONTRIBUTING.md; then
          echo "Found placeholder URLs in documentation"
          exit 1
        fi

        echo "Link validation passed!"

  # Slack notifications for CI completion
  notify-slack:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [test, integration-test, build, security, performance, docs]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'pull_request')

    steps:
    - name: Determine overall CI status
      id: ci-status
      run: |
        # Check critical jobs (test and build are most important)
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack on CI completion
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            attachments: [{
              color: '${{ steps.ci-status.outputs.color }}',
              title: '${{ steps.ci-status.outputs.emoji }} RadioBridge CI Pipeline',
              title_link: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              fields: [
                {
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                },
                {
                  title: 'Branch',
                  value: '${{ github.ref_name }}',
                  short: true
                },
                {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Overall Status',
                  value: '${{ steps.ci-status.outputs.status }}',
                  short: false
                },
                {
                  title: 'Job Results',
                  value: '• Tests: ${{ needs.test.result }}\n• Integration: ${{ needs.integration-test.result }}\n• Build: ${{ needs.build.result }}\n• Security: ${{ needs.security.result }}\n• Performance: ${{ needs.performance.result }}\n• Docs: ${{ needs.docs.result }}',
                  short: false
                }
              ],
              footer: 'RadioBridge CI',
              ts: '${{ github.event.head_commit.timestamp }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
